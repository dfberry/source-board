name: Deploy to Azure Container App

env:
  AZ_APP_NAME: dfberrynextapp
  AZURE_GROUP_NAME: nextjs-app-4
  AZURE_CONTAINER_REGISTRY: dfberrynextreg
  IMAGE_NAME: sourceboardnextjs
on:
  # Automatically trigger it when detected changes in repo. Remove comments to enable
  #push:
  #  branches: 
  #    [ main ]

  # Allow mannually trigger 
  workflow_dispatch:      

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      # - name: Lowercase the repo name and username
      #   run: echo "REPO_NAME=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to Azure Container Registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Extract repository name
        id: extract_repo
        run: echo "REPO_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Save image to environment variable
        run: echo "IMAGE=${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Deploy to containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp registry set -n ${{ env.AZ_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --server ${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }} --username ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }} --password ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }} --debug
            az containerapp update -n ${{ env.AZ_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --image ${{ env.IMAGE }} --debug

      - name: Get FQDN of the deployed containerapp
        uses: azure/CLI@v1
        with:
          inlineScript: |
            FQDN=$(az containerapp show -n ${{ env.AZ_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --query configuration.ingress.fqdn -o tsv)
            echo "FQDN=${FQDN}" >> $GITHUB_ENV

      - name: Get container image of the active revision
        uses: azure/CLI@v1
        with:
          inlineScript: |
            IMAGE=$(az containerapp revision show -n ${{ env.AZ_APP_NAME }} -g ${{ env.AZURE_GROUP_NAME }} --query containers[0].image -o tsv)
            echo "ACTIVE_IMAGE=${IMAGE}" >> $GITHUB_ENV

      - name: Debug
        run: |
          echo "The FQDN is ${{ env.FQDN }}"
          echo "The active   container image is ${{ env.ACTIVE_IMAGE }}"   
          echo "The expected container image is ${{ env.IMAGE }}"         


      - name: Check if image exists in ACR
        run: |
          IMAGE_TAG=${{ github.sha }}
          REPO=${{ secrets.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}
          TAGS=$(az acr repository show-tags --name ${{ secrets.AZ_REG_NAME }} --repository $REPO --output tsv)
          if echo "$TAGS" | grep -q "$IMAGE_TAG"; then
            echo "Image $REPO:$IMAGE_TAG exists in ACR."
          else
            echo "Error: Image $REPO:$IMAGE_TAG does not exist in ACR."
            exit 1
          fi

      - name: Compare active image to expected image
        run: |
          if [ "${{ env.ACTIVE_IMAGE }}" != "${{ env.IMAGE }}" ]; then
            echo "Error: The active container image does not match the expected image."
            exit 1
          else
            echo "The active container image matches the expected image."
          fi